// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: otps.sql

package database

import (
	"context"
)

const createOtp = `-- name: CreateOtp :one
INSERT INTO account_otps (
  account_id,
otp,
type
) VALUES ($1, $2, $3) RETURNING id, account_id, otp, type, created_at, updated_at
`

type CreateOtpParams struct {
	AccountID int64  `json:"account_id"`
	Otp       string `json:"otp"`
	Type      int64  `json:"type"`
}

func (q *Queries) CreateOtp(ctx context.Context, arg CreateOtpParams) (AccountOtp, error) {
	row := q.db.QueryRow(ctx, createOtp, arg.AccountID, arg.Otp, arg.Type)
	var i AccountOtp
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Otp,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllOtps = `-- name: DeleteAllOtps :exec
DELETE FROM account_otps
`

func (q *Queries) DeleteAllOtps(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllOtps)
	return err
}

const deleteOtp = `-- name: DeleteOtp :exec
DELETE FROM account_otps WHERE id = $1 AND account_id = $2 AND type = $3
`

type DeleteOtpParams struct {
	ID        int64 `json:"id"`
	AccountID int64 `json:"account_id"`
	Type      int64 `json:"type"`
}

func (q *Queries) DeleteOtp(ctx context.Context, arg DeleteOtpParams) error {
	_, err := q.db.Exec(ctx, deleteOtp, arg.ID, arg.AccountID, arg.Type)
	return err
}

const getOtpByAccountID = `-- name: GetOtpByAccountID :one
SELECT id, account_id, otp, type, created_at, updated_at FROM account_otps WHERE account_id = $1
`

func (q *Queries) GetOtpByAccountID(ctx context.Context, accountID int64) (AccountOtp, error) {
	row := q.db.QueryRow(ctx, getOtpByAccountID, accountID)
	var i AccountOtp
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Otp,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOtpByAccountIDAndType = `-- name: GetOtpByAccountIDAndType :one
SELECT id, account_id, otp, type, created_at, updated_at FROM account_otps WHERE account_id = $1 AND type = $2
`

type GetOtpByAccountIDAndTypeParams struct {
	AccountID int64 `json:"account_id"`
	Type      int64 `json:"type"`
}

func (q *Queries) GetOtpByAccountIDAndType(ctx context.Context, arg GetOtpByAccountIDAndTypeParams) (AccountOtp, error) {
	row := q.db.QueryRow(ctx, getOtpByAccountIDAndType, arg.AccountID, arg.Type)
	var i AccountOtp
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Otp,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOtpByID = `-- name: GetOtpByID :one
SELECT id, account_id, otp, type, created_at, updated_at FROM account_otps WHERE id = $1
`

func (q *Queries) GetOtpByID(ctx context.Context, id int64) (AccountOtp, error) {
	row := q.db.QueryRow(ctx, getOtpByID, id)
	var i AccountOtp
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Otp,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOtps = `-- name: ListOtps :many
SELECT id, account_id, otp, type, created_at, updated_at FROM account_otps ORDER BY id LIMIT $1 OFFSET $2
`

type ListOtpsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOtps(ctx context.Context, arg ListOtpsParams) ([]AccountOtp, error) {
	rows, err := q.db.Query(ctx, listOtps, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountOtp{}
	for rows.Next() {
		var i AccountOtp
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Otp,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOtp = `-- name: UpdateOtp :one
UPDATE account_otps SET otp = $1, updated_at = now()
WHERE account_id = $2 AND type = $3 RETURNING id, account_id, otp, type, created_at, updated_at
`

type UpdateOtpParams struct {
	Otp       string `json:"otp"`
	AccountID int64  `json:"account_id"`
	Type      int64  `json:"type"`
}

func (q *Queries) UpdateOtp(ctx context.Context, arg UpdateOtpParams) (AccountOtp, error) {
	row := q.db.QueryRow(ctx, updateOtp, arg.Otp, arg.AccountID, arg.Type)
	var i AccountOtp
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Otp,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
